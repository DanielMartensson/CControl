<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>imcollect.c</FILENAME>
      <LINE>83</LINE>
      <COLUMN>46</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to 'model-&gt;fisherfaces_model.input', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>imcollect</FUNCTION>
    <DECORATED>imcollect</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>imcollect.c</FILENAME>
      <LINE>95</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to 'model-&gt;fisherfaces_model.class_id', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>imcollect</FUNCTION>
    <DECORATED>imcollect</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>3100</LINE>
      <COLUMN>50</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fast9_score</FUNCTION>
    <DECORATED>fast9_score</DECORATED>
    <FUNCLINE>3091</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>6230</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to 'ret_corners', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>fast9_detect</FUNCTION>
    <DECORATED>fast9_detect</DECORATED>
    <FUNCLINE>3106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>3120</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fast9_detect</FUNCTION>
    <DECORATED>fast9_detect</DECORATED>
    <FUNCLINE>3106</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>8562</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fast10_score</FUNCTION>
    <DECORATED>fast10_score</DECORATED>
    <FUNCLINE>8553</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>11020</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to 'ret_corners', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>fast10_detect</FUNCTION>
    <DECORATED>fast10_detect</DECORATED>
    <FUNCLINE>8568</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>8582</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fast10_detect</FUNCTION>
    <DECORATED>fast10_detect</DECORATED>
    <FUNCLINE>8568</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>12974</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fast11_score</FUNCTION>
    <DECORATED>fast11_score</DECORATED>
    <FUNCLINE>12965</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>15016</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to 'ret_corners', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>fast11_detect</FUNCTION>
    <DECORATED>fast11_detect</DECORATED>
    <FUNCLINE>12980</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>12994</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fast11_detect</FUNCTION>
    <DECORATED>fast11_detect</DECORATED>
    <FUNCLINE>12980</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>16583</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fast12_score</FUNCTION>
    <DECORATED>fast12_score</DECORATED>
    <FUNCLINE>16574</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>18203</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to 'ret_corners', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>fast12_detect</FUNCTION>
    <DECORATED>fast12_detect</DECORATED>
    <FUNCLINE>16589</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>16603</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fast12_detect</FUNCTION>
    <DECORATED>fast12_detect</DECORATED>
    <FUNCLINE>16589</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>featuredetection.c</FILENAME>
      <LINE>18243</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nonmax_suppression</FUNCTION>
    <DECORATED>nonmax_suppression</DECORATED>
    <FUNCLINE>18216</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>hough.c</FILENAME>
      <LINE>110</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to '*x', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>hough_cluster</FUNCTION>
    <DECORATED>hough_cluster</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>hough.c</FILENAME>
      <LINE>111</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to '*y', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>hough_cluster</FUNCTION>
    <DECORATED>hough_cluster</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>hough.c</FILENAME>
      <LINE>112</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to '*z', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>hough_cluster</FUNCTION>
    <DECORATED>hough_cluster</DECORATED>
    <FUNCLINE>101</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>generalizedhough.c</FILENAME>
      <LINE>23</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>generalizedhough_create_data</FUNCTION>
    <DECORATED>generalizedhough_create_data</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>generalizedhough.c</FILENAME>
      <LINE>156</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to 'model[theta].vote', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>generalizedhough_create_model</FUNCTION>
    <DECORATED>generalizedhough_create_model</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>generalizedhough.c</FILENAME>
      <LINE>211</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>6319</DEFECTCODE>
    <DESCRIPTION>Use of the comma-operator in a tested expression causes the left argument to be ignored when it has no side-effects.</DESCRIPTION>
    <FUNCTION>generalizedhough_create_model</FUNCTION>
    <DECORATED>generalizedhough_create_model</DECORATED>
    <FUNCLINE>77</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>generalizedhough.c</FILENAME>
      <LINE>359</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>6319</DEFECTCODE>
    <DESCRIPTION>Use of the comma-operator in a tested expression causes the left argument to be ignored when it has no side-effects.</DESCRIPTION>
    <FUNCTION>generalizedhough_eval_votes</FUNCTION>
    <DECORATED>generalizedhough_eval_votes</DECORATED>
    <FUNCLINE>245</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>generalizedhough.c</FILENAME>
      <LINE>359</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>6269</DEFECTCODE>
    <DESCRIPTION>Possibly incorrect order of operations.</DESCRIPTION>
    <FUNCTION>generalizedhough_eval_votes</FUNCTION>
    <DECORATED>generalizedhough_eval_votes</DECORATED>
    <FUNCLINE>245</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>kpca_lda_nn.c</FILENAME>
      <LINE>43</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>Size mismatch: 'unsigned __int64' passed as _Param_(2) when 'int' is required in call to 'printf'. </DESCRIPTION>
    <FUNCTION>kpca_lda_nn</FUNCTION>
    <DECORATED>kpca_lda_nn</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>kpca_lda_nn.c</FILENAME>
      <LINE>142</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>Return value ignored: 'scanf'.</DESCRIPTION>
    <FUNCTION>kpca_lda_nn</FUNCTION>
    <DECORATED>kpca_lda_nn</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>kpca_lda_nn.c</FILENAME>
      <LINE>42</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>6011</DEFECTCODE>
    <DESCRIPTION>Dereferencing NULL pointer 'general_settings'. </DESCRIPTION>
    <FUNCTION>kpca_lda_nn</FUNCTION>
    <DECORATED>kpca_lda_nn</DECORATED>
    <FUNCLINE>26</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>4</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
        <FILENAME>kpca_lda_nn.c</FILENAME>
        <LINE>28</LINE>
        <COLUMN>25</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>declaration</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'general_settings' is NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
        <FILENAME>kpca_lda_nn.c</FILENAME>
        <LINE>29</LINE>
        <COLUMN>23</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>Assume switch ( '&lt;branch condition&gt;' ) resolves to the default case</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
        <FILENAME>kpca_lda_nn.c</FILENAME>
        <LINE>36</LINE>
        <COLUMN>1</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
        <FILENAME>kpca_lda_nn.c</FILENAME>
        <LINE>37</LINE>
        <COLUMN>8</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
        <FILENAME>kpca_lda_nn.c</FILENAME>
        <LINE>38</LINE>
        <COLUMN>21</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
        <FILENAME>kpca_lda_nn.c</FILENAME>
        <LINE>39</LINE>
        <COLUMN>24</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
        <FILENAME>kpca_lda_nn.c</FILENAME>
        <LINE>42</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>Skip this branch, (assume '&lt;branch condition&gt;' is false)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
        <FILENAME>kpca_lda_nn.c</FILENAME>
        <LINE>42</LINE>
        <COLUMN>21</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'general_settings' is dereferenced, but may still be NULL</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>clusterclassification.c</FILENAME>
      <LINE>25</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fsm</FUNCTION>
    <DECORATED>fsm</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\Hardware\</FILEPATH>
      <FILENAME>scan_sub_folder_names.c</FILENAME>
      <LINE>36</LINE>
      <COLUMN>34</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to '*sub_folder_names', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>scan_sub_folder_names</FUNCTION>
    <DECORATED>scan_sub_folder_names</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\Hardware\</FILEPATH>
      <FILENAME>scan_file_names.c</FILENAME>
      <LINE>44</LINE>
      <COLUMN>28</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to '*file_names', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>scan_file_names</FUNCTION>
    <DECORATED>scan_file_names</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>459</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>474</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>475</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>506</LINE>
      <COLUMN>58</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>515</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>516</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>517</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>526</LINE>
      <COLUMN>39</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>526</LINE>
      <COLUMN>84</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>532</LINE>
      <COLUMN>17</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>534</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>540</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>543</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>567</LINE>
      <COLUMN>44</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>569</LINE>
      <COLUMN>29</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>570</LINE>
      <COLUMN>20</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>eig.c</FILENAME>
      <LINE>572</LINE>
      <COLUMN>19</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>qr_shift_algorithm</FUNCTION>
    <DECORATED>qr_shift_algorithm</DECORATED>
    <FUNCLINE>443</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>nonlinsolve.c</FILENAME>
      <LINE>68</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nonlinsolve</FUNCTION>
    <DECORATED>nonlinsolve</DECORATED>
    <FUNCLINE>12</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\LinearAlgebra\</FILEPATH>
      <FILENAME>svd.c</FILENAME>
      <LINE>187</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>svd</FUNCTION>
    <DECORATED>svd</DECORATED>
    <FUNCLINE>28</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>dbscan.c</FILENAME>
      <LINE>79</LINE>
      <COLUMN>30</COLUMN>
    </SFA>
    <DEFECTCODE>6308</DEFECTCODE>
    <DESCRIPTION>'realloc' might return null pointer: assigning null pointer to 'neighbors1', which is passed as an argument to 'realloc', will cause the original memory block to be leaked.</DESCRIPTION>
    <FUNCTION>dbscan</FUNCTION>
    <DECORATED>dbscan</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>76</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>Size mismatch: 'unsigned __int64' passed as _Param_(2) when 'int' is required in call to 'printf'. </DESCRIPTION>
    <FUNCTION>nn_train</FUNCTION>
    <DECORATED>nn_train</DECORATED>
    <FUNCLINE>58</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>76</LINE>
      <COLUMN>95</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nn_train</FUNCTION>
    <DECORATED>nn_train</DECORATED>
    <FUNCLINE>58</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>138</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>Size mismatch: 'unsigned __int64' passed as _Param_(3) when 'int' is required in call to 'printf'. </DESCRIPTION>
    <FUNCTION>nn_eval</FUNCTION>
    <DECORATED>nn_eval</DECORATED>
    <FUNCLINE>119</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>139</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>Size mismatch: 'unsigned __int64' passed as _Param_(3) when 'int' is required in call to 'printf'. </DESCRIPTION>
    <FUNCTION>nn_eval</FUNCTION>
    <DECORATED>nn_eval</DECORATED>
    <FUNCLINE>119</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>140</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>Size mismatch: 'unsigned __int64' passed as _Param_(3) when 'int' is required in call to 'printf'. </DESCRIPTION>
    <FUNCTION>nn_eval</FUNCTION>
    <DECORATED>nn_eval</DECORATED>
    <FUNCLINE>119</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>141</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>6328</DEFECTCODE>
    <DESCRIPTION>Size mismatch: 'unsigned __int64' passed as _Param_(3) when 'int' is required in call to 'printf'. </DESCRIPTION>
    <FUNCTION>nn_eval</FUNCTION>
    <DECORATED>nn_eval</DECORATED>
    <FUNCLINE>119</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>138</LINE>
      <COLUMN>138</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nn_eval</FUNCTION>
    <DECORATED>nn_eval</DECORATED>
    <FUNCLINE>119</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>139</LINE>
      <COLUMN>133</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nn_eval</FUNCTION>
    <DECORATED>nn_eval</DECORATED>
    <FUNCLINE>119</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>140</LINE>
      <COLUMN>124</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nn_eval</FUNCTION>
    <DECORATED>nn_eval</DECORATED>
    <FUNCLINE>119</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\MachineLearning\</FILEPATH>
      <FILENAME>nn.c</FILENAME>
      <LINE>141</LINE>
      <COLUMN>145</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>nn_eval</FUNCTION>
    <DECORATED>nn_eval</DECORATED>
    <FUNCLINE>119</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>imread.c</FILENAME>
      <LINE>41</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>Return value ignored: 'sscanf'.</DESCRIPTION>
    <FUNCTION>imread</FUNCTION>
    <DECORATED>imread</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>imread.c</FILENAME>
      <LINE>48</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>Return value ignored: 'sscanf'.</DESCRIPTION>
    <FUNCTION>imread</FUNCTION>
    <DECORATED>imread</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>imread.c</FILENAME>
      <LINE>60</LINE>
      <COLUMN>3</COLUMN>
    </SFA>
    <DEFECTCODE>6031</DEFECTCODE>
    <DESCRIPTION>Return value ignored: 'fscanf'.</DESCRIPTION>
    <FUNCTION>imread</FUNCTION>
    <DECORATED>imread</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\ImageProcessing\</FILEPATH>
      <FILENAME>imread.c</FILENAME>
      <LINE>52</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>imread</FUNCTION>
    <DECORATED>imread</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\Users\dmn\GitHub\CControl\src\CControl\Sources\SignalProcessing\FFTpack\</FILEPATH>
      <FILENAME>fftpack.c</FILENAME>
      <LINE>2663</LINE>
      <COLUMN>25</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>sinti</FUNCTION>
    <DECORATED>sinti</DECORATED>
    <FUNCLINE>2645</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>