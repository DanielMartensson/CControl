/*
 ============================================================================
 Name        : brisk.c
 Author      : <Your Name Here>
 Version     : 1.0
 Copyright   : MIT
 Description : Binary Robust Invariant Scalable Keypoints
 ============================================================================
 */

#include "CControl/ccontrol.h"

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Read image */
	PGM* image = imread("..\\src\\CControl\\Documents\\Data\\fast\\lab.pgm");

	/* Create matrix X */
	const size_t row = image->height;
	const size_t column = image->width;
	float* X = (float*)malloc(row * column * sizeof(float));
	size_t i, j;
	for (i = 0; i < row * column; i++) {
		X[i] = (float)image->pixels[i];
	}

	/* Tuning parameters */
	float sigma1 = 1.0f;
	float sigma2 = 6.0f;
	uint8_t sobel_threshold = 127;
	FAST_METHOD fast_method = FAST_METHOD_9;
	int threshold_fast = 50;

	/* Use BRISK to find the histogram descriptors */
	BRISK* brisk_model = brisk(X, sigma1, sigma2, sobel_threshold, threshold_fast, fast_method, row, column);
	end = clock();

	/* Print histogram */
	for (i = 0; i < brisk_model->data_row; i++) {
		for (j = 0; j < brisk_model->data_column; j++) {
			printf("%i\t", brisk_model->data[i* brisk_model->data_column + j]);
		}
		printf("\n");
	}

	/* Free */
	free(X);
	imfree(image);
	briskfree(brisk_model);

	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	return EXIT_SUCCESS;
}
