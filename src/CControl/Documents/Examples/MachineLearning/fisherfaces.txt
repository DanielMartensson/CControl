/*
 ============================================================================
 Name        : fisherfaces.c
 Author      : Daniel Mårtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Train and classify images
 ============================================================================
 */

#include "CControl/ccontrol.h"

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Create fisher faces parameter struct */
	FISHER_FACES_SETTINGS fisher_faces_settings;
	fisher_faces_settings.isModelCreated = false;

	/* Select data and what to do */
	strcpy(fisher_faces_settings.folder_path, "..\\src\\CControl\\Documents\\Data\\yale");

	/*
	 * Face detection:
	 * Pooling size makes the image smaller and faster to compute.
	 * To small pooling can cause low accuracy.
	 * Pooling method is which method pooling should treat the image. If you want no pooling, just set pooling_method to POOLING_METHOD_NO_POOLING
	 * To create the .pgm files of .gif, .jpg, .png etc, head over to MataveID and run the fisherfaces.m MATLAB-file.
	 */
	fisher_faces_settings.pooling_size = 8;
	fisher_faces_settings.pooling_method = POOLING_METHOD_AVERAGE;

	/*
	 * Remove outliers from the data:
	 * epsilon is the outliers radius
	 * min_pts is the minimum points for a cluster
	 */
	fisher_faces_settings.remove_outliers = true;
	fisher_faces_settings.epsilon = 500;
	fisher_faces_settings.min_pts = 3;

	/*
	 * Kernel PCA configuration:
	 * The variable components_pca is a tuning parameter.
	 * Keep that large, but not so large so PCA will include garbage values into your traing data
	 * I'm using about components_pca = 100 for Yale dataset. A good rule of thump is not use more than total images you have in your folders.
	 * The array kernel_parameters is for nonlinear kernels. Some nonlinear kernels only need 1 parameters, some want more.
	 */
	fisher_faces_settings.components_pca = 100;
	fisher_faces_settings.kernel_parameters[0] = 0.0000001f;
	fisher_faces_settings.kernel_method = KERNEL_METHOD_RBF;

	/*
	 * Neural network configuration:
	 * This neural network is build by support vector machines. The C hyperparameter tells the SVM optimization how much you want to avoid misclassifying each training example.
	 * For large values of C, the optimization will choose a smaller-margin hyperplane if that hyperplane does a better job of getting all the training points classified correctly.
	 * Conversely, a very small value of C will cause the optimizer to look for a larger-margin separating hyperplane,
	 * even if that hyperplane misclassifies more points. For very tiny values of C, you should get misclassified examples, often even if your training data is linearly separable.
	 * Lambda is regularization for the SVM. Large lambda value makes it faster to optimize, with less accuracy.
	 */
	fisher_faces_settings.C = 1.0f;
	fisher_faces_settings.lambda = 2.5f;

	/* Fisherfaces training */
	fisherfaces(&fisher_faces_settings);

	/* Here is the model parameters */
	printf("\nBias b parameters with size %i x 1\n", fisher_faces_settings.model_row);
	print(fisher_faces_settings.model_b, fisher_faces_settings.model_row, 1);
	printf("\nWeight W parameters have the size %i x %i\n", fisher_faces_settings.model_row, fisher_faces_settings.model_column);
	printf("The method to find the class ID is: class_id = activation_function(W * x + b)\n");

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);
	return EXIT_SUCCESS;
}