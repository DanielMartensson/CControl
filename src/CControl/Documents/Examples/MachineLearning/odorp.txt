/*
 ============================================================================
 Name        : odorp.c
 Author      : Daniel Mårtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Train and classify specific objects
 ============================================================================
 */

#include "CControl/ccontrol.h"

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Create Object Detection ORP parameter struct */
	DATA_SETTINGS settings;
	settings.data_settings_odorp.save_model = true;

	/* Select data and what to do */
	strcpy(settings.data_settings_odorp.folder_path, "..\\src\\CControl\\Documents\\Data\\objects");

	/*
	 * ORP configurtion:
	 * sigma1 is for background blurring. It helps because then FAST cannot find interest points into blurred images
	 * sigma1 is for blurring before finding the descriptors. A blurred image is much better to use for descriptors, instead of a clear image
	 * threshold_sobel is for removing weak corners and edges
	 * threshold_fast is the parameter that controls who many interest points it can find
	 * fast_method is the method for FAST algorithm
	 */
	settings.data_settings_odorp.sigma1 = 0.8f;
	settings.data_settings_odorp.sigma2 = 2.0f;
	settings.data_settings_odorp.threshold_sobel = 255;
	settings.data_settings_odorp.threshold_fast = 100;
	settings.data_settings_odorp.fast_method = FAST_METHOD_9;

	/*
	 * Neural network configuration:
	 * This neural network is build by support vector machines. The C hyperparameter tells the SVM optimization how much you want to avoid misclassifying each training example.
	 * For large values of C, the optimization will choose a smaller-margin hyperplane if that hyperplane does a better job of getting all the training points classified correctly.
	 * Conversely, a very small value of C will cause the optimizer to look for a larger-margin separating hyperplane,
	 * even if that hyperplane misclassifies more points. For very tiny values of C, you should get misclassified examples, often even if your training data is linearly separable.
	 * Lambda is regularization for the SVM. Large lambda value makes it faster to optimize, with less accuracy.
	 */
	settings.data_settings_odorp.C = 1.0f;
	settings.data_settings_odorp.lambda = 100.0f;

	/*
	 * K-means clustering:
	 * This K-value determine how many clusters there are inside the data.
	 * The reason why I choosen K-means clustering is because it split the data as it was gaussian, e.g. linear separated
	 */
	settings.data_settings_odorp.k_value = 5;

	/* Object Detection ORP training */
	DATA_COLLECT* data_collect = odorp(&settings);

	/* Free */
	imcollect_free(data_collect);

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);
	return EXIT_SUCCESS;
}