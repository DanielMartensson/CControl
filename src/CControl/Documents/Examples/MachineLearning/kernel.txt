/*
 ============================================================================
 Name        : kernel.c
 Author      : <Your Name Here>
 Version     : 1.0
 Copyright   : MIT
 Description : Apply a kernel onto matrix A
 ============================================================================
 */

#include "CControl/ccontrol.h"

#define row 3
#define column 3

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Create A */
	float A[row * column] = { 1.0, 2.0, 3.0,
							  4.0, 5.0, 6.0,
							  7.0, 8.0, 9.0 };

	/* Create K matrix */
	float K[row * row];

	/* Parameters */
	float parameters[2];

	/* Linear kernel */
	kernel(A, K, row, column, NULL, KERNEL_METHOD_LINEAR);
	print(K, row, column);

	/* RFB kernel*/
	parameters[0] = -0.1; /* Gamma */
	kernel(A, K, row, column, parameters, KERNEL_METHOD_RBF);
	print(K, row, column);

	/* Polynomial kernel */
	parameters[0] = 3; /* Degree */
	parameters[1] = 0.5; /* constant */
	kernel(A, K, row, column, parameters, KERNEL_METHOD_POLY);
	print(K, row, column);

	/* Sigmoid kernel */
	parameters[0] = 0.001; /* a */
	parameters[1] = -0.1; /* c */
	kernel(A, K, row, column, parameters, KERNEL_METHOD_SIGMOID);
	print(K, row, column);

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	return EXIT_SUCCESS;
}