/*
 ============================================================================
 Name        : kpca.c
 Author      : Daniel Mårtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Kernel Principal Component analysis
 ============================================================================
 */

#include "CControl/ccontrol.h"

#define row 23
#define column 3
#define components 2

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Create X */
	float X[row * column] = { -3244, 5324, 1345,
								10, 30, 100,
								20, 40, 93,
								30, 60, 163,
								60, 100, 126,
								55, 13, 134,
								306, 34, 104,
								316, 56, 120,
								326, 74, 127,
								337, 80, 128,
								347, 89, 131,
								358, 103, 139,
								-31, -56, -120,
								-32, -74, -127,
								-33, -80, -128,
								-34, -89, -131,
								-35, -103, -139,
								700, 600, 500,
								1000, 1000, 1000,
								-3231, 4345, -4352,
								-2342, 4356, 3453,
								-2364, 4326, 3353,
								658, 143, 1692 };

	/* Create the output matrix */
	float W[row * components];

	/* Create the projection matrix */
	float P[components * row];

	/* Create the kernel matrix */
	float K[row * row];

	/* Create the average matrix */
	float mu[row];

	/* Do KPCA */
	float kernel_parameters[2] = {1, 2};
	kpca(X, W, P, K, mu, components, row, column, kernel_parameters, KERNEL_METHOD_POLY);

	/* Print components W */
	printf("Components:\n");
	print(W, row, components);

	/* Print projection P */
	printf("Projection:\n");
	print(P, components, row);

	/* Reconstruct */
	float K_reconstruct[row * row];
	mul(W, P, K_reconstruct, row, components, row);

	/* Error K_error = K - K_reconstruct */
	size_t i;
	float K_error[row * row];
	for (i = 0; i < row * row; i++) {
		K_error[i] = K[i] - K_reconstruct[i];
	}
	float error_reconstruction = norm(K_error, row, row, NORM_METHOD_FROBENIUS) / norm(K, row, row, NORM_METHOD_FROBENIUS);
	printf("Reconstruction error: %f\n", error_reconstruction);

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	return EXIT_SUCCESS;
}

/* GNU Octave code
   % First clear and close all figures - You need to have MataveID package
	clear
	close all

	% Create data
	X = [-3244 5324 1345;
		10 30 100;
		20 40 93;
		30 60 163;
		60 100 126;
		55 13 134;
		306 34 104;
		316 56 120;
		326 74 127;
		337 80 128;
		347 89 131;
		358 103 139;
		-31 -56 -120;
		-32 -74 -127;
		-33 -80 -128;
		-34 -89 -131;
		-35 -103 -139;
		700 600 500;
		1000 1000 1000;
		-3231 4345 -4352;
		-2342 4356 3453;
		-2364 4326 3353;
		658 143 1692];

	% Plot original data
	cmap = jet(length(X));
	scatter3(X(:, 1), X(:, 2), X(:, 3), 50,cmap)
	title('Original 3D data', 'FontSize', 20)

	% Do KPCA
	c = 2;
	kernel_type = 'polynomial';
	kernel_parameters = [1, 2];
	[K, P, W] = mi.kpca(X, c, kernel_type, kernel_parameters);

	% Reconstruct
	K_reconstructed = W * P;
	reconstruction_error = norm(K - K_reconstructed, 'fro') / norm(K, 'fro')

	figure
	switch(c)
	case 3
	  scatter3(K_reconstructed(:, 1), K_reconstructed(:, 2), K_reconstructed(:, 3));
	case 2
	  scatter(K_reconstructed(:, 1), K_reconstructed(:, 2));
	case 1
	  scatter(K_reconstructed(:, 1), 0*K_reconstructed(:, 1));
	end
	grid on
	title(sprintf('Reconstruction %iD with error %f', c, reconstruction_error), 'FontSize', 20)
*/