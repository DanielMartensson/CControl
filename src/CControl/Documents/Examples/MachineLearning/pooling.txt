/*
 ============================================================================
 Name        : pooling.c
 Author      : <Your Name Here>
 Version     : 1.0
 Copyright   : MIT
 Description : Shrink A matrix into a smaller matrix P using pooling
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

#define row 10
#define column 10
#define p 2

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Create A */
	float A[row * column] = { 0.950541,   0.565081,   0.233296,   0.134038,   0.092543,   0.174173,   0.675002,   0.271878,   0.921699,   0.296898,
							  0.028431,   0.986487,   0.898816,   0.283115,   0.157745,   0.864740,   0.839363,   0.329373,   0.303102,   0.030187,
							  0.287999,   0.970384,   0.685952,   0.327385,   0.042384,   0.065263,   0.668094,   0.016202,   0.133942,   0.967720,
							  0.119599,   0.788482,   0.775595,   0.125143,   0.898057,   0.745977,   0.181511,   0.863085,   0.237734,   0.818524,
							  0.975217,   0.397514,   0.781937,   0.314420,   0.414597,   0.501971,   0.768909,   0.440769,   0.501774,   0.352254,
							  0.218738,   0.229907,   0.662609,   0.272773,   0.982926,   0.543600,   0.777082,   0.965983,   0.345566,   0.999757,
							  0.141835,   0.473209,   0.028366,   0.482486,   0.245346,   0.802416,   0.456072,   0.551474,   0.544778,   0.922006,
							  0.057235,   0.284095,   0.951537,   0.370885,   0.958261,   0.596167,   0.361224,   0.489283,   0.439690,   0.704039,
							  0.099949,   0.092182,   0.199169,   0.250974,   0.127467,   0.072122,   0.659420,   0.509071,   0.515593,   0.131673,
							  0.610705,   0.863790,   0.684771,   0.188464,   0.860727,   0.037058,   0.051288,   0.865577,   0.753889,   0.557765 };

	/* Create P */
	float P[row * column / p];

	/* Do pooling */
	pooling(A, P, row, column, p, POOLING_METHOD_SHAPE);

	/* Print P */
	print(P, row / p, column / p);

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	return EXIT_SUCCESS;
}