/*
 ============================================================================
 Name        : mpc.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Model Predictive Control with integral action
 ============================================================================
 */

#include "CControl/ccontrol.h"

 /* Constants */
#define sampleTime 1.0f
#define row_a 2
#define column_b 1
#define row_c 1
#define column_e 1
#define iterations 1000
#define N 10
#define qw 1.0f
#define rv 0.1f
#define qz 1.0f
#define s 1.0f
#define Spsi_spsi 1.0f

int main() {
    clock_t start, end;
    float cpu_time_used;

    /* Mass damping spring system of second order. Described as state space x(k+1) = A*x(k) + B*u(k) */
    const float k = 8.7f;    /* Spring constant [N/m] */
    const float b = 3.1f;   /* Damper constant [Ns/m] */
    const float m = 13.5f;    /* Mass [kg] */
    const float A[row_a * row_a] = { 0, 1, -k / m, -b / m };
    const float B[row_a * column_b] = { 0, 1/m };
    const float C[row_c * row_a] = { 0.5f, 0 };
    const float E[row_a * column_e] = { 0, 0 };

    /* Declare MPC structure */
    MPC mpc = { 0 };

    /* Init the structure */
    bool is_initlized = mpc_init(&mpc, A, B, C, E, sampleTime, qw, rv, qz, s, Spsi_spsi, row_a, column_b, row_c, column_e, N, iterations);

    /* Set constraints */
    const float deltaumin[column_b] = { -30 };
    const float deltaumax[column_b] = { 30 };
    const float umin[column_b] = { 0 };
    const float umax[column_b] = { 60 };
    const float zmin[row_c] = { -1 };
    const float zmax[row_c] = { 100 };
    mpc_set_constraints(&mpc, umin, umax, zmin, zmax, deltaumin, deltaumax);

    /* Compute u */
    float u[column_b] = { 0 };
    const float r[row_c] = { 10 };
    const float y[row_c] = { 0.5f };
    const float d[column_e] = { 0 };
    const float alpha = 0.1f;
    const float antiwindup = 100.0f;
    start = clock();
    mpc_optimize(&mpc, u, r, y, d, alpha, antiwindup);

    /* Compute next state x */
    mpc_estimate(&mpc, y);
    end = clock();

    /* Print u */
    printf("Optimized output u:\n");
    print(u, column_b, 1);

    /* Print x */
    printf("Estimated state x:\n");
    print(mpc.x, row_a, 1);

    /* Is struct initlized */
    printed("Is MPC struct initlized after mpc_init: %s", is_initlized ? "yes" : "no");

    /* Free */
    mpc_free(&mpc);

    /* Is struct initlized */
    printed("Is MPC struct initlized after mpc_free: %s", mpc.is_initlized ? "yes" : "no");

    cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
    printf("\nTotal speed  was %f\n", cpu_time_used);

    /* Check memory */
    detectmemoryleak();

    return EXIT_SUCCESS;
}
