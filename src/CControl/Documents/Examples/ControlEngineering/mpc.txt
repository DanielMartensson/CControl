/*
 ============================================================================
 Name        : mpc.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Model Predictive Control with integral action and kalman filtering
 ============================================================================
 */

#include "CControl/ccontrol.h"

 /* Constants */
#define sampleTime 1.0f          /* Sample time of discrete model */
#define row_a 2                  /* Dimension of system matrix A */
#define column_b 1               /* Columns of input matrix B */
#define row_c 1                  /* Dimension of output matrix C */
#define column_e 1               /* Columns of disturbance matrix E */
#define iterations 1000          /* Simulation for finding kalman gain K */
#define N 10                     /* MPC control horizon */
#define qw 1.0f                  /* Kalman scalar for disturbance covariance matrix Q */
#define rv 0.1f                  /* Kalman scalar for noise covariance matrix R */
#define qz 1.0f                  /* Weight scalar for weight matrix QZ */
#define s 1.0f                   /* Regularization scalar for regularization matrix S */
#define Spsi_spsi 1.0f           /* Slack variable scalar for slack variable matrix Spsi and slack vector spsi */
#define alpha 0.1f               /* Integral action constant */
#define antiwindup 100.0f        /* Anti-windup max/min limitation for the integral action */

int main() {
    clock_t start, end;
    float cpu_time_used;

    /* Mass damping spring system of second order with disturbance input d. Described as state space x(k+1) = A*x(k) + B*u(k) + E*d(k) */
    const float k = 8.7f;                       /* Spring constant [N/m] */
    const float b = 3.1f;                       /* Damper constant [Ns/m] */
    const float m = 13.5f;                      /* Mass [kg] */
    const float A[row_a * row_a] = { 0, 1, -k / m, -b / m };
    const float B[row_a * column_b] = { 0, 1/m };
    const float C[row_c * row_a] = { 0.5f, 0 };
    const float E[row_a * column_e] = { 0, 0 };

    /* Declare MPC structure */
    MPC mpc = { 0 };

    /* Init the structure */
    const bool is_initlized = mpc_init(&mpc, A, B, C, E, sampleTime, qw, rv, qz, s, Spsi_spsi, row_a, column_b, row_c, column_e, N, iterations);

    /* Set constraints */
    const float deltaumin[column_b] = { -30 }; /* Minimum rate of change for input u */
    const float deltaumax[column_b] = { 30 };  /* Maximum rate of change for input u */
    const float umin[column_b] = { 0 };        /* Minimum limit for input u */
    const float umax[column_b] = { 60 };       /* Maximum limit for input u */
    const float zmin[row_c] = { -1 };          /* Minimum limit for output y */
    const float zmax[row_c] = { 100 };         /* Maximum limit for output y */
    mpc_set_constraints(&mpc, umin, umax, zmin, zmax, deltaumin, deltaumax);

    /* Compute u */
    float u[column_b] = { 0 };                 /* Control output e.g PWM signal for your e.g real process. MPC will compute u depending on the provided matrices and vectors. */
    const float r[row_c] = { 10 };             /* User setpoint for the trajectory */
    const float y[row_c] = { 0.5f };           /* User mesured output */
    const float d[column_e] = { 0 };           /* User mesured known process disturbance */
    start = clock();
    const bool status = mpc_optimize(&mpc, u, r, y, d, alpha, antiwindup);

    /* Compute next state x */
    mpc_estimate(&mpc, y);
    end = clock();

    /* Print u */
    printf("Optimized output u (success: %s):\n", status ? "yes" : "no");
    print(u, column_b, 1);

    /* Print x */
    printf("Estimated state x:\n");
    print(mpc.x, row_a, 1);

    /* Is struct initlized */
    printf("Is MPC struct initlized after mpc_init: %s\n", is_initlized ? "yes" : "no");

    /* Free */
    mpc_free(&mpc);

    /* Is struct initlized */
    printf("Is MPC struct initlized after mpc_free: %s\n", mpc.is_initlized ? "yes" : "no");

    cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
    printf("\nTotal speed  was %f\n", cpu_time_used);

    /* Check memory */
    detectmemoryleak();

    return EXIT_SUCCESS;
}
