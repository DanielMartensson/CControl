/*
 ============================================================================
 Name        : ssint.c
 Author      : <Your Name Here>
 Version     : 1.0
 Copyright   : MIT
 Description : Add integral action
 ============================================================================
 */

#include "CControl/ccontrol.h"

#define row_a 4
#define column_b 2
#define row_c 3

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Create A matrix */
	float A[row_a * row_a] = { 2,   3,   4,   4,
							   2,   5,   1,   5,
							   6,   3,   2,   2,
                               4,   5,   5,   6};

	/* Create B matrix */
	float B[row_a * column_b] = { 4,   3,
								  2,   5,
								  2,   1,
								  3,   4 };

	/* Create C matrix */
	float C[row_c * row_a] = { 2,   3,   4,   3,
							   5,   1,   3,   4,
							   2,   1,   5,   5 };

	/* Create Ai matrix */
	float Ai[(row_a + column_b) * (row_a + column_b)];

	/* Create Bi matrix */
	float Bi[(row_a + column_b) * column_b];

	/* Create Ci matrix */
	float Ci[row_c * (row_a + column_b)];

	/* Add integral action */
	bool status = ssint(A, B, C, Ai, Bi, Ci, row_a, column_b, row_c);
	
	/* Print Ai */
	print(Ai, row_a + column_b, row_a + column_b);

	/* Print Bi */
	print(Bi, row_a + column_b, column_b);

	/* Print Ci */
	print(Ci, row_c, row_a + column_b);

	/* Status */
	printf("Did the model already have integral action?: %s", !status ? "Yes" : "No");

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	/* Detect memory leak */
	detectmemoryleak();

	return EXIT_SUCCESS;
}

/*
GNU Octave code:

function retval = ss_int_test ()
  A =[
			  2            3            4            4
			  2            5            1            5
			  6            3            2            2
			  4            5            5            6];


  B = [

			  4            3
			  2            5
			  2            1
			  3            4];


  C = [

			  2            3            4            3
			  5            1            3            4
			  2            1            5            5];


  sys = mc.ss(0, A, B, C)


	  % Add integral action - It's very good and pratical!
	  % A = [A B; 0 I]
	  % B = [0; I]
	  % C = [C 0]
	  % x = [x; u(k-1)]
	  am = size(A, 1);
	  bn = size(B, 2);
	  cm = size(C, 1);
	  A = [A B; zeros(bn, am) eye(bn, bn)]
	  B = [zeros(am, bn); eye(bn, bn)]
	  C = [C zeros(cm, bn)]


end

*/