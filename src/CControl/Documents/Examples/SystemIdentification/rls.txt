/*
 ============================================================================
 Name        : rls.c
 Author      : Daniel Mårtensson
 Version     : 1.0
 Copyright   : MIT
 Description : System identification example
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

/* Dimensions for input and output */
#define YDIM 1
#define RDIM 1

/* Recursive Least Squares with kalman filter - It's recommended to have NP = NZ = NZE */
#define NP 5
#define NZ 5
#define NZE 5
#define ADIM NP
#define forgetting 0.99
#define Pq 1000

int main() {

	/*
	 * Assume that we reading u(k), and y(k) from an ADC. In this case, we have
	 * a vector of u's and y's, but in real time running, we will not have this vector.
	 */
	float input[100] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 }; /* Input signal */

	float output[100] = { 0.00000, 0.00477, 0.01786, 0.03761, 0.06264, 0.09174,
			0.12390, 0.15827, 0.19412, 0.23085, 0.26796, 0.30504, 0.34175,
			0.37782, 0.41304, 0.44723, 0.48027, 0.51207, 0.54255, 0.57168,
			0.59943, 0.62581, 0.65081, 0.67447, 0.69680, 0.71785, 0.73765,
			0.75625, 0.77369, 0.79004, 0.80533, 0.81963, 0.83297, 0.84541,
			0.85701, 0.86780, 0.87784, 0.88717, 0.89584, 0.90388, 0.91134,
			0.91825, 0.92465, 0.93058, 0.93606, 0.94113, 0.94582, 0.95015,
			0.95415, 0.95784, 0.96124, 0.96915, 0.98513, 1.00755, 1.03503,
			1.06640, 1.10064, 1.13692, 1.17453, 1.21288, 1.25148, 1.28993,
			1.32790, 1.36513, 1.40141, 1.43658, 1.47052, 1.50313, 1.53437,
			1.56419, 1.59258, 1.61953, 1.64507, 1.66921, 1.69199, 1.71345,
			1.73362, 1.75257, 1.77033, 1.78697, 1.80252, 1.81706, 1.83062,
			1.84327, 1.85505, 1.86601, 1.87621, 1.88568, 1.89447, 1.90263,
			1.91020, 1.91721, 1.92370, 1.92971, 1.93527, 1.94041, 1.94516,
			1.94955, 1.95360, 1.95734 };

	/* Estimation SISO model - Assume that this this is inside the microprocessor's while(1) loop */
	float past_e; /* The past e */
	float past_y; /* The past y */
	float past_u; /* The past u */
	float phi[NP + NZ + NZE];
	float P[(NP + NZ + NZE) * (NP + NZ + NZE)];
	float theta[NP + NZ + NZE]; /* Remember that total length is POLY_LENGTH*3 - ALWAYS have these dimensions */
	uint8_t i, count = 0; /* Initial set to 0. Will be counted to 2 then stop. Set count = 0 again and the algorithm starts over */
	for (i = 0; i < sizeof(output) / sizeof(output[0]); i++) {
		rls(NP, NZ, NZE, theta, input[i], output[i], &count, &past_e, &past_y, &past_u, phi, P, Pq, forgetting);
	}

	/* Find our state space model with kalman gain matrix from theta - NP = ADIM */
	float A[NP * NP];
	float B[NP * RDIM];
	float C[YDIM * NP];
	float K[NP * YDIM];
	bool integral_action = false;
	theta2ss(A, B, C, theta, K, ADIM, NP, NZ, integral_action);

	/* Print our state space matrix */
	printf("System matrix: A\n");
	print(A, NP, NP);

	printf("Input matrix: B\n");
	print(B, NP, RDIM);

	printf("Output matrix: C\n");
	print(C, YDIM, NP);

	printf("Kalman gain matrix: K\n");
	print(K, NP, YDIM);

	return EXIT_SUCCESS;
}

/* Octave code:

	%% Example made by Daniel Mårtensson - 2019-10-08
	%% To run this example. You need to install Matavecontrol and Mataveid

	% Real life model of a water tank
	G = tf([1], [1 2 1]);

	% Time
	t = linspace(0, 10, 100);

	% Input signals
	u1 = linspace(1, 1, 50);
	u2 = linspace(2, 2, 50);
	u = [u1 u2];

	% Simulation of the model - It will give you a graphical plot what type of data you need
	y = lsim(G, u, t);

	% Put some noise to output
	%y = y + 0.03*randn(1, length(y));

	% Identification with recursive least squares and model order 5 and delay 0 and lambda 0.99
	[Gd, Hd, sysd, K] = rls(u, y, 5, 5, 5, t(2)-t(1), 0, 0.99); % sysd contains K at column 2 of B

	% Transfer function to state space
	sysd = tf2ss(Gd)

	disp('Kalman K')
	K
*/
