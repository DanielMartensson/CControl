/*
 ============================================================================
 Name        : pca.c
 Author      : Daniel Mårtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Principal Component analysis
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

#define row 23
#define column 3
#define components 2

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/*
	   This matrix X has 3 columns and X contains clusters and outliers.
	   This PCA algorithm is removing outliers via Robust Principal Components before projection
	*/
	float X[row * column] = { -3244, 5324, 1345,
								10, 30, 100,
								20, 40, 93,
								30, 60, 163,
								60, 100, 126,
								55, 13, 134,
								306, 34, 104,
								316, 56, 120,
								326, 74, 127,
								337, 80, 128,
								347, 89, 131,
								358, 103, 139,
								-31, -56, -120,
								-32, -74, -127,
								-33, -80, -128,
								-34, -89, -131,
								-35, -103, -139,
								700, 600, 500,
								1000, 1000, 1000,
								-3231, 4345, -4352,
								-2342, 4356, 3453,
								-2364, 4326, 3353,
								658, 143, 1692 };

	/* Create the output matrix */
	float W[column * components];

	/* Create the projection matrix */
	float P[row * components];

	/* Do PCA */
	pca(X, W, P, components, row, column);

	/* Print components W */
	printf("Components:\n");
	print(W, column, components);

	/* Print projection P */
	printf("Projection:\n");
	print(P, row, components);

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	return EXIT_SUCCESS;
}
