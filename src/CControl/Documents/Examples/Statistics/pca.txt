/*
 ============================================================================
 Name        : pca.c
 Author      : Daniel Mårtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Principal Analysis Component
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

#define row 7
#define column 5
#define components 4

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Create a matrix A */
	float A[row * column] = {-1.0337,     -0.43158,      -1.7464,     -0.61109,       1.1577,
							   1.0955,       0.1066,      0.39597,     -0.42132,       2.3321,
							  -0.7158,     -0.88635,     -0.07532,    -0.097022,     -0.64252,
							   1.7255,      -1.8957,      0.86026,     -0.93985,      0.12185,
							  0.31585,       2.0008,     -0.35329,     -0.65319,     -0.57178,
							  0.15334,     -0.35022,       2.1064,       0.3132,    -0.089738,
							 -0.34019,      0.81315,      0.26919,      -1.2984,    -0.037872};

	/* Create the output matrix */
	float W[row * components] = { 0 };
	float mu[row];

	/* Do PCA */
	pca(A, mu, W, components, row, column);

	/* Print components W */
	printf("Components:\n");
	print(W, row, components);

	/* Print average mu */
	printf("Average:\n");
	print(mu, row, 1);

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);


	return EXIT_SUCCESS;
}
