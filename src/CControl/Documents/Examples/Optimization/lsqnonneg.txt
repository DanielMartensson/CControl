/*
 ============================================================================
 Name        : lsqnonneg.c
 Author      : Daniel Mårtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Optimize a linear problem with Non-Negative Least Squares (NNLS) algorithm
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

int main() {

	/* Matrix A */
	float A[6 * 4] = { 1.9889143,   0.8156388,   0.7197012,   0.9117410,
					0.3513571,   0.9509832,   0.7666883,   0.2984587,
					0.7419696,   0.6665918,   0.8349609,   0.0493249,
					0.5387147,   0.9922028,   0.7225777,   0.1423897,
					0.0217779,   0.5598255,   0.5004498,   0.5730017,
					0.9608793,   0.4709475,   0.0031274,   0.0698641 };

	/* Vector b */
	float b[6] = { 1.883369,
				  0.653627,
				  0.417359,
				  0.049459,
				  0.879004,
				  1.152040 };

	/* Solution that need to have the same rows and columns from A */
	float x[4];

	/* Residuals */
	float residual[6];

	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* 
	 * Non-Negative Least Squares (NNLS) Algorithm 
	 * Min Ax - b
	 * S.t x >= 0
	 */
	bool solution = lsqnonneg(A, x, b, residual, 6, 4);
	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	printf("x (solution found: %s )\n", solution ? "yes" : "no");
	print(x, 4, 1);

	printf("Residuals\n");
	print(residual, 6, 1);

	return EXIT_SUCCESS;
}

/*
 * GNU Octave code:
 * A = [ 1.9889143,   0.8156388,   0.7197012,   0.9117410;
		 0.3513571,   0.9509832,   0.7666883,   0.2984587;
		 0.7419696,   0.6665918,   0.8349609,   0.0493249;
		 0.5387147,   0.9922028,   0.7225777,   0.1423897;
		 0.0217779,   0.5598255,   0.5004498,   0.5730017;
		 0.9608793,   0.4709475,   0.0031274,   0.0698641];

	b = [ 1.883369;
		  0.653627;
		  0.417359;
		  0.049459;
		  0.879004;
		  1.152040];

   [x, ~, residual, solution] = lsqnonneg(A, b) % If solution > 0, then x is optimal
 *
 */