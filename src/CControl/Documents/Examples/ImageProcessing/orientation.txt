/*
 ============================================================================
 Name        : orientation.c
 Author      : <Your Name Here>
 Version     : 1.0
 Copyright   : MIT
 Description : Compute the orientation by using Intensity Centroid
 ============================================================================
 */

#include "CControl/ccontrol.h"

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Read a PGM image */
	PGM* image = imread("..\\src\\CControl\\Documents\\Data\\orientation\\orientation.pgm");

	/* Create X */
	size_t i;
	float* X = (float*)malloc(image->height * image->width * sizeof(float));
	for (i = 0; i < image->height * image->width; i++) {
		X[i] = (float)image->pixels[i];
	}

	/* Find the orientation by using Intensity Centroid */
	const size_t radius = 120;
	const size_t row = image->height;
	const size_t column = image->width;
	const size_t x = row / 2;
	const size_t y = column / 2;
	float angle = orientation(X, radius, x, y, row, column);

	/* Print orientation in degrees */
	printf("The orientation is: %f\n", rad2deg(angle));

	/* Free */
	imfree(image);
	free(X);

	/* Detect memory leakage */
	detectmemoryleak();

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	return EXIT_SUCCESS;
}