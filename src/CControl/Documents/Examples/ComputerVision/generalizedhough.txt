/*
 ============================================================================
 Name        : generalizedhough.c
 Author      : <Your Name Here>
 Version     : 1.0
 Copyright   : MIT
 Description : Object detection with Generalized Hough Transform with Mårtensson method
 ============================================================================
 */

#include "CControl/ccontrol.h"

int main() {
	clock_t start, end;
	float cpu_time_used;

	/* Parameters for setup */
	const int fast_threshold = 50;
	const float epsilon = 10;
	const size_t min_pts = 2;
	const FAST_METHOD fast_method = FAST_METHOD_9;
	const char* path_train = "..\\src\\CControl\\Documents\\Data\\generalizedhough\\train.pgm";
	const char* path_test = "..\\src\\CControl\\Documents\\Data\\generalizedhough\\test_scaled.pgm";
	const float smoothing_accumulator = 0;

	/* Parameters for result */
	float max_value_accumulator;
	size_t max_classes, xc, yc;

	/* Read image */
	PGM* image = imread(path_train);

	/* Create train data */
	float* C = generalizedhough_collect(image->pixels, image->height, image->width, fast_threshold, fast_method, epsilon, min_pts, &max_classes);
	
	/* Free */
	imfree(image);

	/* Train Hough model */
	GENERALIZED_HOUGH_MODEL* model = generalizedhough_train(C, max_classes);

	/* Free */
	free(C);

	/* Read image */
	image = imread(path_test);

	/* Create test data */
	start = clock();
	C = generalizedhough_collect(image->pixels, image->height, image->width, fast_threshold, fast_method, epsilon, min_pts, &max_classes);

	/* Free */
	imfree(image);

	/* Compare test data with the model */
	generalizedhough_eval(C, model, smoothing_accumulator, &max_value_accumulator, &xc, &yc, max_classes);
	end = clock();

	/* Print result */
	printf("The centroid is [%i, %i]\n", (int)xc, (int)yc);

	/* Free */
	free(C);
	generalizedhough_free(model);

	/* Memory leak */
	detectmemoryleak();

	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	return EXIT_SUCCESS;
}