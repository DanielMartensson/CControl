/*
 ============================================================================
 Name        : violajones.c
 Author      : <Your Name Here>
 Version     : 1.0
 Copyright   : MIT
 Description : Build a viola jones model for object detection
 ============================================================================
 */

#include "CControl/ccontrol.h"

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Declare data */
	const char* train_path_faces = "..\\src\\CControl\\Documents\\Data\\violajones\\train\\face";
	const char* train_path_non_faces = "..\\src\\CControl\\Documents\\Data\\violajones\\train\\non-face";
	const char* test_path_faces = "..\\src\\CControl\\Documents\\Data\\violajones\\test\\face";
	const char* test_path_non_faces = "..\\src\\CControl\\Documents\\Data\\violajones\\test\\non-face";
	const size_t row = 19;
	const size_t column = 19;
	const uint8_t N = 8;
	const size_t total_haarlikes = 100;

	/* Initial train and test data */
	uint32_t* train_data = NULL;
	uint32_t* test_data = NULL;
	int8_t* train_y = NULL;
	int8_t* test_y = NULL;
	size_t total_train_data_rows;
	size_t total_test_data_rows;
	voilajones_collect(&train_data, &train_y, &total_train_data_rows, train_path_faces, train_path_non_faces, row, column);
	voilajones_collect(&test_data, &test_y, &total_test_data_rows, test_path_faces, test_path_non_faces, row, column);

	/* Create the save */
	HAARLIKE_FEATURE* save = (HAARLIKE_FEATURE*)malloc(N * sizeof(HAARLIKE_FEATURE));

	/* Train Viola Jones model */
	size_t iter;
	float max_accuracy = 0.0f;
	for (iter = 0; iter < MAX_ITERATIONS; iter++) {
		/* Get features */
		HAARLIKE_FEATURE* features = violajones_train(train_data, train_y, total_train_data_rows, total_haarlikes, N, row, column);

		/* Do evaluation */
		const float accuracy = violajones_eval(features, N, test_data, test_y, total_test_data_rows, row, column);

		/* Remmeber */
		if (accuracy > max_accuracy) {
			/* Print */
			size_t i;
			for (i = 0; i < N; i++) {
				switch (features[i].haarlike_feature_choice) {
				case HARLIIKE_FEATURE_CHOICE_SQUARES:
					printf("Squares:");
					break;
				case HARLIIKE_FEATURE_CHOICE_LINE_VERTICAL:
					printf("Line vertical:");
					break;
				case HARLIIKE_FEATURE_CHOICE_LINE_HORIZONTAL:
					printf("Line horizontal:");
					break;
				case HARLIIKE_FEATURE_CHOICE_EDGE_VERTICAL:
					printf("Edge vertical:");
					break;
				case HARLIIKE_FEATURE_CHOICE_EDGE_HORIZONTAL:
					printf("Edge horizontal:");
					break;
				case HARLIIKE_FEATURE_CHOICE_CENTER:
					printf("Center:");
					break;
				}
				printf(" x1 = %i, x2 = %i, x3 = %i, x4 = %i, y1 = %i, y2 = %i, y3 = %i, y4 = %i\n", features[i].x1, features[i].x2, features[i].x3, features[i].x4, features[i].y1, features[i].y2, features[i].y3, features[i].y4);
			}
			max_accuracy = accuracy;
			printf("The accuracy is: %f at iteration %i\n", accuracy, iter);
			memcpy(save, features, N * sizeof(HAARLIKE_FEATURE));
		}

		/* Free */
		free(features);

		/* Break if we have more than 90% accuracy */
		if (max_accuracy > 90.0f) {
			printf("Breaking the traing at iteration %i\n", iter);
			break;
		}
	}

	/* Free */
	free(save);
	free(train_data);
	free(test_data);
	free(train_y);
	free(test_y);

	/* Memory leakage */
	detectmemoryleak();

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);
	return EXIT_SUCCESS;
}
