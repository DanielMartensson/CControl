/*
 ============================================================================
 Name        : mul_at_bc.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Compute D = A'*B*C
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

int main() {

	float A [10*6] = {-0.433394,   0.278422,  -1.023816,  -0.685246,  -2.522174,   1.519773,
				       0.436349,   0.090482,  -0.937444,   0.779249,  -0.939243,  -1.913526,
				       2.774075,  -1.255168,   0.207749,   0.191749,   0.792312,  -0.201041,
					   1.079424,  -0.809794,   0.343935,   0.255140,  -0.390280,   0.346842,
					   0.813631,  -1.169705,   0.154307,   0.544002,  -0.773535,   0.983982,
					   1.721245,   0.307763,   0.056856,   0.655271,   0.931621,   0.486039,
					   1.273108,   0.195401,   0.267128,   3.815890,  -1.441082,   0.675211,
					   0.696080,  -0.078450,  -2.167726,  -0.739348,  -0.682215,  -0.327527,
					  -0.260960,   0.334609,   0.538043,  -0.108593,   0.813089,   3.101853,
				  	  -0.535003,  -1.104550,  -1.891203,   1.632075,   0.104577,   1.537092};

	float B[10*5] = {   0.365538,   0.819696,  -0.678377,   0.455721,   0.550668,
					   -0.124906,   0.105643,   0.370907,   1.599701,   0.853579,
					   -0.303399,   0.320718,  -0.030259,  -0.246887,  -0.237819,
					    0.245086,  -0.204492,   0.102836,  -0.252448,  -0.498743,
					   -0.736376,   0.257135,   0.883968,   0.347229,   0.799271,
					   -0.209417,  -0.448321,  -0.017691,  -1.995118,  -1.243968,
					    0.699636,   0.640878,   0.586330,   0.914712,  -0.387452,
					   -0.565452,   0.393734,   0.635644,  -0.259368,  -0.895053,
					    0.324667,   2.224340,   0.518273,  -1.436725,   1.042484,
					   -1.811828,  -0.905678,  -1.506752,   2.188069,  -1.453681};

	float C[5*8] = {-1.301195,  -0.783157,   1.927534,   0.389120,  -0.036835,  -1.009216,  -1.866301,   0.149224,
				    -1.058109,   1.063686,  -0.619591,  -0.259768,   2.568637,   1.621733,  -0.867414,   1.670795,
				     0.741944,  -1.598556,  -0.046425,   0.196823,  -0.673001,   0.215687,  -0.793841,  -1.996422,
				    -0.548508,   0.499263,   0.984509,  -0.862646,  -1.879741,  -1.042061,  -1.294193,   0.674749,
				    -0.049338,  -0.042436,   0.693322,   0.074111,  -0.241436,   1.433374,   1.943334,  -0.720840};

	float D[6*8];

	clock_t start, end;
	float cpu_time_used;
	start = clock();

	tran(A, 10, 6);
	mul_at_bc(A, B, C, D, 10, 6, 5, 8); // Do D = A'*B*C
	tran(A, 6, 10); // If we want to have it back

	end = clock();
	cpu_time_used = ((float) (end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	printf("Matrix: D:\n");
	print(D, 6, 8);

	return EXIT_SUCCESS;
}

/*
 * GNU Octave code:
 * D = A'*B*C
 */
