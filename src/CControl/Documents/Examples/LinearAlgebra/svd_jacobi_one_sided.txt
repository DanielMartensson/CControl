/*
 ============================================================================
 Name        : svd_jacobi_one_sided.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Do singular value decomposition on square matrix A
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

int main() {

	// Matrix A
	float A[4*4] = {0.453690,   0.866686,   0.579250,   0.418100,
				    0.059901,   0.954740,   0.699338,   0.681427,
				    0.127995,   0.981347,   0.713651,   0.485167,
				    0.269875,   0.723569,   0.778578,   0.130682};

	float U[4*4];
	float S[4];
	float V[4*4];

	// Do SVD with one-sided jacobi
	clock_t start, end;
	float cpu_time_used;
	start = clock();
	svd_jacobi_one_sided(A, 4, U, S, V);
	end = clock();
	cpu_time_used = ((float) (end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	// Print U
	printf("U\n");
	print(U, 4, 4);

	// Print U
	printf("S\n");
	print(S, 4, 1);

	// Print V
	printf("V\n");
	print(V, 4, 4);

	return EXIT_SUCCESS;
}

/*
 * GNU Octave code:
 * A = [0.453690,   0.866686,   0.579250,   0.418100,
	    0.059901,   0.954740,   0.699338,   0.681427,
		0.127995,   0.981347,   0.713651,   0.485167,
		0.269875,   0.723569,   0.778578,   0.130682];

   [U, S, V] = svd(A)
 */
