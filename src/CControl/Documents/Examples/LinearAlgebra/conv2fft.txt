/*
 ============================================================================
 Name        : conv2fft.c
 Author      : <Your Name Here>
 Version     : 1.0
 Copyright   : MIT
 Description : Convolutional matrix multiplication with FFT
 ============================================================================
 */

#include "CControl/ccontrol.h"

#define row_a 8
#define column_a 6
#define row_k 3 /* This number must be odd */

int main() {
	clock_t start, end;
	float cpu_time_used;
	start = clock();

	/* Create A */
	float A[row_a * column_a] = { 0.350465, -0.177253, -0.581183, -0.301331, -0.546504, -2.416981,
								  0.858123,   0.298243, -0.158775, -0.860663, -1.632077,   0.865414,
								-1.493957,   2.336641, -0.446940,   0.708597,   0.305746, -0.047449,
								-0.468543,   0.048264, -0.433347,   0.312619, -0.842901,   0.080138,
								  1.770406, -0.824584,   0.620406, -1.679783,   0.136926,   0.717155,
								  0.873513, -0.388835,   0.191366,   1.072161,   1.603772, -1.356124,
								-1.509112, -0.612916,   0.176142, -1.533731,   0.518523,   2.354984,
								  0.832047, -1.777008, -0.206316, -1.224436,   0.305427, -1.668821 };

	/* Create B */
	float B[row_a * column_a];

	/* Create kernel */
	float K[row_k * row_k] = { 0.847876,   0.098338,   0.135350,
							   0.301776,   0.151369,   0.914207,
							   0.769967,   0.790160,   0.302300 };

	/* Do conv2fft */
	conv2fft(A, B, row_a, column_a, K, row_k);

	/* Print B */
	print(B, row_a, column_a);

	end = clock();
	cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	return EXIT_SUCCESS;
}