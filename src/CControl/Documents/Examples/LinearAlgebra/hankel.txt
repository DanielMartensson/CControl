/*
 ============================================================================
 Name        : hankel.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Create two hankel matrices. One shifted, smal and other normal
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

int main() {

	/* Output */
	float V[2 * 10] = { 3, 51, 3, 2, 6, 7, 8, 9, 1, 4,
						1,  3, 1, 4, 5, 1, 7, 8, 1, 10};

	float A[1*10] = {0, 2, 4, 1, 4, 5, 7, 2, 7, 8};

	/* Hankel matrix - Remember! If we want V into H and V is more then 1 row
	   then we need to increase the rows of hanekel matrix H */
	float H0[(2*5)*5]; /* Half hankel matrix - Yes, that's possible too! Used in era() function */
	float H1[(2*10)*10]; /* Normal hankel matrix */
	float H2[10*10]; /* Normal hankel matrix */

	clock_t start, end;
	float cpu_time_used;
	start = clock();

	hankel(V, H0, 2, 10, 2*5, 5, 1); /* Shift = 1 */
	hankel(V, H1, 2, 10, 2*10, 10, 0); /* Shift = 0 */
	hankel(A, H2, 1, 10, 10, 10, 0);

	end = clock();
	cpu_time_used = ((float) (end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	printf("Half hankel matrix:\n");
	print(H0, 2*5, 5);

	printf("Complete hankel matrix:\n");
	print(H1, 2*10, 10);

	printf("Complete hankel matrix:\n");
	print(H2, 10, 10);

	return EXIT_SUCCESS;
}
