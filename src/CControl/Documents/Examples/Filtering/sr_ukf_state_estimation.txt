/*
 ============================================================================
 Name        : sr_ukf_state_estimation.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Filter with Square Root Unscented Kalman Filter
 ============================================================================
 */

#include "CControl/Headers/Functions.h"

int main() {

	// Initial parameters
	uint8_t L = 1; 							// How many states we have
	float alpha = 0.1; 						// Alpha value
	float beta = 2; 						// Beta value
	float kappa = 0; 						// Kappa value
	float Rv[1 * 1] = { 0.0001 }; 			// Initial disturbance covariance matrix
	float Rn[1 * 1] = { 2 }; 				// Initial noise covariance matrix
	float S[1 * 1] = { 1 }; 				// Initial covariance matrix
	float xhat[1] = { 15 }; 				// Initial estimated state, a rule of thumb: Use a regular measurement only
	float y[1] = { 0 };						// This is our measurement
	float u[1] = { 0 }; 					// u is not used in this example due to the transition function not using a input signal

	// Our transition function is a random variable float
	void F(float Xstar[], float X[], float u[], uint8_t L) {
		uint8_t N = 2 * L + 1;
		float a[L];
		float r[1];
		for (uint8_t j = 0; j < N; j++) {
			for (uint8_t i = 0; i < L; i++)
				a[i] = X[i * N + j]; // Extract one column from matrix X
			randn(r, 1, 0, 1); // Create one random value with mean 0 and deviation 1
			Xstar[j] = stddev(a, L) * r[0] + mean(a, L);
		}
	}

	// Data of a laser measurement with mean 14 and deviation 1
	float X[500]; // Estimated
	float data[500] = { 15, 14, 13, 14, 15, 14, 16, 14, 15, 14, 13, 15, 14, 15,
			13, 14, 16, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 16, 15, 14, 13,
			14, 15, 13, 14, 13, 14, 15, 14, 15, 13, 15, 14, 16, 14, 13, 14, 15,
			13, 15, 14, 15, 13, 14, 15, 13, 15, 14, 13, 14, 15, 16, 13, 15, 14,
			13, 15, 14, 16, 14, 16, 15, 17, 14, 16, 14, 13, 16, 13, 15, 16, 15,
			14, 15, 14, 12, 15, 13, 14, 13, 12, 15, 13, 12, 14, 15, 14, 13, 14,
			15, 14, 13, 16, 15, 13, 14, 15, 14, 15, 12, 16, 15, 17, 15, 14, 13,
			14, 15, 13, 14, 16, 14, 15, 14, 15, 13, 15, 14, 15, 13, 15, 13, 15,
			16, 13, 14, 15, 16, 14, 13, 15, 13, 16, 15, 13, 15, 16, 15, 14, 15,
			13, 14, 15, 14, 13, 15, 14, 15, 14, 13, 14, 15, 14, 15, 16, 15, 14,
			15, 14, 15, 14, 16, 14, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 13,
			14, 15, 14, 13, 14, 17, 14, 15, 14, 15, 13, 14, 13, 14, 16, 14, 15,
			14, 13, 15, 13, 12, 13, 14, 15, 14, 15, 13, 14, 15, 14, 13, 14, 16,
			14, 13, 14, 15, 16, 13, 14, 15, 13, 14, 13, 15, 14, 15, 16, 13, 14,
			13, 14, 13, 14, 12, 15, 14, 15, 16, 14, 13, 15, 14, 15, 14, 15, 14,
			13, 15, 13, 14, 13, 14, 15, 14, 15, 14, 15, 13, 14, 15, 13, 14, 16,
			14, 15, 14, 13, 15, 14, 15, 14, 16, 15, 13, 16, 15, 13, 15, 14, 15,
			16, 14, 15, 13, 14, 15, 14, 15, 12, 15, 13, 14, 16, 15, 13, 14, 15,
			14, 15, 14, 15, 13, 14, 15, 14, 15, 14, 13, 15, 12, 14, 15, 13, 15,
			12, 15, 14, 15, 14, 13, 15, 14, 15, 13, 14, 15, 14, 15, 12, 13, 15,
			14, 15, 14, 13, 14, 15, 13, 16, 15, 14, 15, 14, 15, 13, 14, 15, 16,
			15, 14, 15, 14, 15, 14, 15, 14, 16, 13, 15, 14, 16, 15, 14, 13, 14,
			13, 14, 15, 14, 15, 14, 15, 14, 15, 13, 16, 13, 14, 13, 14, 15, 13,
			15, 14, 16, 14, 15, 14, 15, 13, 15, 13, 14, 15, 14, 15, 14, 13, 14,
			13, 14, 15, 13, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 13, 15, 14,
			15, 16, 14, 15, 14, 12, 14, 16, 14, 15, 14, 15, 14, 15, 13, 14, 13,
			14, 12, 14, 13, 14, 15, 14, 15, 14, 15, 13, 15, 13, 16, 14, 15, 14,
			15, 14, 15, 14, 15, 16, 14, 15, 13, 15, 13, 16, 14, 13, 14, 15, 13,
			15, 13, 16, 15, 12, 14, 13, 16, 15, 14, 13, 14, 15, 17, 15, 14, 13,
			14, 16, 15, 14, 13, 15, 14, 16, 15, 14 };

	clock_t start, end;
	float cpu_time_used;
	start = clock();

	// Do SR-UKF
	for (uint32_t i = 0; i < 500; i++) {
		y[0] = data[i];
		X[i] = xhat[0];
		sr_ukf_state_estimation(y, xhat, Rn, Rv, u, F, S, alpha, beta, kappa, L);
	}

	end = clock();
	cpu_time_used = ((float) (end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	// Here is the filtered data
	print(X, 500, 1);

	return EXIT_SUCCESS;
}
